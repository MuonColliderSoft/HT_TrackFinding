//
//  Track.h
//  MuonColliderToy
//
//  Created by Luciano Ristori on 6/25/21
//




	class Hit; // forward declaration
    
    
    
    class Track {
    
           
    private:
        
        // common track initialization code
        void init(int massInd_, double x0_, double y0_, double z0_, double t0_, double invPt_, double eta_, double phi_);
        
              
    public:
        
        // primary parameters
        
        int ID; // sequence number or ID (cleared by constructor, user available)
        
        int massInd; //  mass: 0 = gamma, 1 = e, 2 = pi, 3 = K, 4 = p
        double x0, y0, z0, t0; // origin
        double invPt, eta, phi; // signed inverse pt in GeV/c^(-1), phi [-Pi, +Pi]
        
        // derived parameters
        
        double Pz; // longitudinal component of momentum
        double phi0; // phi coordinate of particle at z = 0
        
        double Pt, E;
        
        double c; // signed curvatures
        double charge; // sign of invPt
        double cotTheta; // cotangent of polar angle
        double tgTheta; // tangent of polar angle
        double cosTheta; // cosine of polar angle
        double beta; // velocity
        
        double cMin = 1.e-6; // minimum curvature - use 1st order approx if less than that
        
        std::vector<Hit> hitList; // copy of hits generated by this track
        
        
        
        // constructors
        
        Track(); // default - generates random track with default parameters from TrackGeometry class
        
        Track(TrackGeometry &g); // generates random track with parameters from specific TrackGeometry class instance
        
        Track(int massInd_, double x0_, double y0_, double z0_, double t0_, double invPt_, double eta_, double phi_); // specific track constructor
        
        void print(std::ostream &out, int mode) ; // dumps text description of track to ostream
        
        
        
        // calculate coordinates of intersections of this track with detector planes
        
        bool xzBarrel(double yDet, double &x, double &z, double &t); // yDet is the position of the barrel plane (parallel to xz)
        bool xyDisc(DetectorGeometry &g, int iDisc, double &X, double &R, double &T, bool smear); // disc plane (parallel to xy)
        bool phizBarrel(DetectorGeometry &g, int iBarrel, double &hitPhi, double &hitZ, double &hitT, bool smear);// hitPhi is a linear coordinate measured along phi
        
        // rigidly rotate track around z
        
        void rotate(double phiRot);
        
        double hitChi2(DetectorGeometry &g, Hit &h);  // compute chi2 of hit with respect of this track
        
        void getIJK(unsigned &I, unsigned &J, unsigned &K); // returns indices in HTM array
        
        
        
        
        
    }; // end class Track
    

